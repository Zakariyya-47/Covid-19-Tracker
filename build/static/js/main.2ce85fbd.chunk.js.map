{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","SocialFollow.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","total","active","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","sortData","data","sort","a","b","map","countries","casesType","center","zoom","TileLayer","url","attribution","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callback","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","SocialFollow","class","href","icon","faInstagram","size","faWhatsapp","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2ce85fbd.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./InfoBox.css\";\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Typography,} \r\n  from \"@material-ui/core\";\r\n\r\nfunction InfoBox({ title, cases, isRed,total, active,...props}) {\r\n    return (\r\n        <Card \r\n        onClick={props.onClick}\r\n        className={`InfoBox ${active && \"InfoBox--selected\"} ${ isRed && \"InfoBox--red\"\r\n        }`}\r\n        >\r\n            <CardContent>\r\n                <Typography className=\"InfoBox__title\" color=\"textSecondary\">{title}</Typography>\r\n\r\n            <h2 className={`InfoBox__cases ${!isRed && \"InfoBox__cases--green\"}`}>\r\n                {cases}</h2>\r\n\r\n                <Typography className=\"InfoBox__total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgb(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgb(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgb(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));","import React from 'react';\r\nimport './Map.css';\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport {showDataOnMap} from \"./util.js\";\r\n\r\nfunction map({countries, casesType, center, zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\" https://www.openstreetmap.org/\">OpenStreetMap</a> contributors'\r\n                />\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default map\r\n","import React from 'react'\r\nimport './Table.css'\r\nimport numeral from 'numeral'\r\nfunction table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country, cases}) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default table\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgb(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgb(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgb(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callback: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType = \"cases\") => {\r\n  const chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      const newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=90\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                data: data,\r\n                backgroundColor: casesTypeColors[casesType].half_op,\r\n                borderColor: casesTypeColors[casesType].hex,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faInstagram,\r\n    faWhatsapp\r\n  } from \"@fortawesome/free-brands-svg-icons\"; \r\nexport default function SocialFollow() {\r\n  return (\r\n    <div class=\"social-container\">\r\n      <a href=\"https://www.instagram.com/zakariyya47\"\r\n        className=\"instagram social\">\r\n        <FontAwesomeIcon icon={faInstagram} size=\"2x\" />\r\n      </a>\r\n      <a href=\"https://wa.link/b46hxu\"\r\n        className=\"whatsapp social\">\r\n        <FontAwesomeIcon icon={faWhatsapp} size=\"2x\" />\r\n      </a>\r\n    </div>\r\n  );\r\n}","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n  BottomNavigation,} \nfrom \"@material-ui/core\";\nimport InfoBox from './InfoBox';\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport {sortData, prettyPrintStat} from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport SocialFollow from \"./SocialFollow\"\n\nfunction App() {\nconst [countries, setCountries] = useState([]);\nconst [country, setCountry] = useState(\"worldwide\");\nconst [countryInfo, setCountryInfo] = useState({});\nconst [tableData, setTableData] = useState([]);\nconst [mapCenter, setMapCenter] = \nuseState ({lat: -13.1403507, lng: 27.8493049}); \nconst [mapZoom, setMapZoom] = useState(6);\nconst[mapCountries, setMapCountries] = useState([]);\nconst [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data);\n    });\n}, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch (\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => (\n          {\n            name: country.country, //umited states, united kingdon\n            value: country.countryInfo.iso2 //us,usa.fr\n          }));\n          \n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountries(countries);\n\n          setMapCountries(data);\n      });\n    };\n    getCountriesData();\n  }, []);\n\n\n    const onCountryChange = async (event) => {\n      const countryCode =event.target.value;\n      setCountry(countryCode);\n\n      const url = \n        countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\" \n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n    .then(response => response.json())\n    .then((data) => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setMapZoom(4);\n    });\n    };\n    \n  return (\n    <div className=\"app__page\">\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {/*loop through all the countries and show a drop menu*/}\n            \n              {\n                countries.map (country=> (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))\n              }\n            </Select>\n          </FormControl>\n        </div>\n    \n        <div className=\"app__stats\">\n            <InfoBox\n            isRed\n             active={casesType ===\"cases\"}\n             onClick={(e) => setCasesType(\"cases\")}\n             title=\"Coronavirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)}/>\n\n            <InfoBox  \n            active={casesType ===\"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)}/>\n\n            <InfoBox\n            isRed\n            active={casesType ===\"deaths\"} \n            onClick={(e) => setCasesType(\"deaths\")} \n            title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)}/>\n        </div>\n        \n        <Map casesType={casesType} \n        countries={mapCountries}\n        center={mapCenter}\n        zoom={mapZoom}\n        />\n      </div>\n              \n      <Card className=\"app__right\">\n      <CardContent>\n          <h3>Live Cases by Country</h3>\n            <Table countries={tableData}></Table>\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n            <LineGraph className=\"app__graph\" casesType={casesType}/>\n      </CardContent>\n      </Card>\n    </div>\n    <div className=\"app__footer\">\n      <footer>Designed and Devoloped by Zakariyya D</footer>\n                <SocialFollow/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}